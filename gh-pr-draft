#!/bin/bash
set -e

echo "Hello gh-pr-draft!"

# Snippets to help get started:

# Determine if an executable is in the PATH
# if ! type -p ruby >/dev/null; then
#   echo "Ruby not found on the system" >&2
#   exit 1
# fi

# Pass arguments through to another command
# gh issue list "$@" -R cli/cli

# Using the gh api command to retrieve and format information
# QUERY='
#   query($endCursor: String) {
#     viewer {
#       repositories(first: 100, after: $endCursor) {
#         nodes {
#           nameWithOwner
#           stargazerCount
#         }
#       }
#     }
#   }
# '
# TEMPLATE='
#   {{- range $repo := .data.viewer.repositories.nodes -}}
#     {{- printf "name: %s - stargazers: %v\n" $repo.nameWithOwner $repo.stargazerCount -}}
#   {{- end -}}
# '
# exec gh api graphql -f query="${QUERY}" --paginate --template="${TEMPLATE}"

number=$1
if [[ -z $number ]]; then
  number=$(gh pr view | grep number | awk '{print $NF}')
fi

QUERY='
  query($owner: String!, $name: String!, $number: Int!) {
    repository(owner: $owner, name: $name) {
      pullRequest(number: $number) {
        id
        number
        isDraft
      }
    }
  }
'
id=$(gh api graphql -F owner='{owner}' -F name='{repo}' -F number="${number}" -f query="${QUERY}" -q '.data.repository.pullRequest.id')
MUTATION='
  mutation($id: String!) {
    convertPullRequestToDraft(input: { pullRequestId: $id }) {
      pullRequest {
        id
        number
        isDraft
      }
    }
  }
'
gh api graphql -F id="${id}" -f query="${MUTATION}" >/dev/null

printf "\033[32mâœ“\033[0m Pull request #${number} is marked as \"draft\"\n"
